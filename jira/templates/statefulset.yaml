# Statefulset are in beta state in k8s 1.5-1.8
apiVersion: {{ .Values.apiVersion | default "apps/v1beta1" }}

# Statefulsets are in GA state in k8s 1.9+ (not beta anymore)
# apiVersion: apps/v1

## We needed to use VolumeTemplate, which does not allow use of Deployment, so we had to use StatefulSet
# kind: Deployment
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}
  labels:
{{- include "jira-chart.labels" . | indent 4 }}
spec:
  # This service should already exist
  serviceName: {{ .Release.Name }}
  replicas: {{ .Values.Replicas | default 1 }}    ## replicas 2
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
    spec:
      {{- if .Values.RBAC.Enabled }}
      serviceAccountName: {{ .Release.Name }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.TerminationGracePeriodSeconds | default 50 }}
      containers:
      - name: {{ required "A container name is required!" .Values.ContainerName }}
        image: {{ .Values.Image.Name }}:{{ .Values.Image.Tag }}
        imagePullPolicy: {{ .Values.Image.ImagePullPolicy }}
        # Resources were added by Kamran on 08 Mar 2018
        {{- if .Values.Resources }}
        resources:
          requests:
            cpu: "{{ .Values.Resources.cpuRequest }}"
            memory: "{{ .Values.Resources.memoryRequest }}"
          limits:
            cpu: "{{ .Values.Resources.cpuLimit }}"
            memory: "{{ .Values.Resources.memoryLimit }}"
        {{- end }}

        ports:
          - containerPort: {{ .Values.ContainerPort }}
            name: jira-main
          {{- if .Values.Datacenter.Enabled }}
          - containerPort: 40001
            name: rmi
          - containerPort: 40011
            name: remote-object
          {{- end }}

        env:
        {{- if .Values.Certs.Enabled }}
          - name: ENABLE_CERT_IMPORT
            value: "true"
          - name: SSL_CERTS_PATH
            value: {{ .Values.Certs.MountPath }}
        {{- end }}
        {{- if .Values.Datacenter.Enabled }}
          - name: DATACENTER_MODE
            value: "true"
          - name: JIRA_DATACENTER_SHARE
            value: {{ .Values.Persistence.DatacenterMountPath }}
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: JIRA_POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: JIRA_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        {{- end }}

        {{- range $key, $value := .Values.EnvVars }}
          - name: {{ $key }}
            value: {{ $value | quote }}
        {{- end }}
        {{- if .Values.Plugins }}
          - name: PLUGINS_FILE
            value: /etc/config/jira-plugins.list
        {{- end }}

        {{- if .Values.LivenessProbe }}
        livenessProbe:
          httpGet:
            path: {{ .Values.LivenessProbe.Path }}
            port: {{ .Values.LivenessProbe.Port }}
          periodSeconds: {{ .Values.LivenessProbe.PeriodSeconds | default 10 }}
          successThreshold: {{ .Values.LivenessProbe.SuccessThreshold | default 1 }}
          initialDelaySeconds: {{ .Values.LivenessProbe.InitialDelaySeconds | default 120 }}
          timeoutSeconds: {{ .Values.LivenessProbe.TimeoutSeconds | default 1 }}
          failureThreshold: {{ .Values.LivenessProbe.FailureThreshold | default 3 }}
        {{- end }}
        {{- if .Values.ReadinessProbe }}
        readinessProbe:
          httpGet:
            path: {{ .Values.ReadinessProbe.Path }}
            port: {{ .Values.ReadinessProbe.Port }}
          periodSeconds: {{ .Values.ReadinessProbe.PeriodSeconds | default 10 }}
          successThreshold: {{ .Values.ReadinessProbe.SuccessThreshold | default 1 }}
          initialDelaySeconds: {{ .Values.ReadinessProbe.InitialDelaySeconds | default 120 }}
          timeoutSeconds: {{ .Values.ReadinessProbe.TimeoutSeconds | default 1 }}
          failureThreshold: {{ .Values.ReadinessProbe.FailureThreshold | default 3 }}
        {{- end }}

        volumeMounts:
          - name: "jira-persistent-storage"
            mountPath: /var/atlassian/application-data/jira
          {{- if .Values.Datacenter.Enabled }}
          - name: "jira-datacenter"
            mountPath: {{ .Values.Persistence.DatacenterMountPath }}
          {{- end }}
          {{- if .Values.Certs.Enabled }}
          - name: "jira-certs"
            mountPath: {{ .Values.Certs.MountPath }}
          {{- end }}
          {{- if .Values.Plugins }}
          - name: pulgins-list
            mountPath: /etc/config/jira-plugins.list
          {{- end }}

      volumes:
       {{- if .Values.Certs.Enabled }}
        - name: jira-certs
          secret:
            secretName: {{ .Values.Certs.SecretName }}
      {{- end }}
      {{- if .Values.Datacenter.Enabled }}
        - name: "jira-datacenter"
          persistentVolumeClaim:
            claimName: {{ .Values.Persistence.DatacenterExistingClaimName | default (printf "%v-datacenter-pvc" .Release.Name) }}
      {{- end }}
      {{- if .Values.Plugins }}
        - name: pulgins-list
          configMap:
            name: {{ .Release.Name }}
      {{- end }}

      # This is pod level security context.
      # The only relevant directive is fsGroup, which creates/prepares the mounted volume by 'chgrp'-ing it to the ID mentioned as fsGroup.
      # The volume mount then has the group sticky bit turned on (setgid) , so  new files created in the volume will be owned by fsGroup;
      #     which enables the user (uid 1000 in our / JIRA case) to be able to write in that volume.

      # Note: runAsUser is useless in this situation.
      # runAsUser: 1000
      # The details about securityContext are here:
      # * - https://kubernetes.io/docs/api-reference/v1.6/#podsecuritycontext-v1-core
      securityContext:
        fsGroup: {{ .Values.SecurityContext }}
      {{- if .Values.Image.PrivateRegistry }}
      imagePullSecrets:
      - name: {{ .Values.Image.PullSecret }}
      {{- end }}


      {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
{{ toYaml . | indent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
    {{- end }}

  volumeClaimTemplates:
  - metadata:
      name: jira-persistent-storage
    spec:
      accessModes: [ {{ .Values.Persistence.VolumeClaimTemplates.AccessModes | quote }} ]
      resources:
        requests:
          storage: {{ .Values.Persistence.VolumeClaimTemplates.Storage | quote }}
      storageClassName: {{ .Values.Persistence.VolumeClaimTemplates.StorageClassName | quote }}
  {{- if .Values.Persistence.VolumeClaimTemplates.Selector.Enabled }}
      selector:
        matchLabels:
          {{- range $key,$value := .Values.Persistence.VolumeClaimTemplates.Selector.MatchLabels }}
          {{ $key }} : {{ $value }}
          {{- end }}
  {{- end }}
